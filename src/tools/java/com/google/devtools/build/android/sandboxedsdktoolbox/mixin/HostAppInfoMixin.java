/*
 * Copyright 2023 The Bazel Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.devtools.build.android.sandboxedsdktoolbox.mixin;

import static com.google.common.base.Preconditions.checkArgument;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import picocli.CommandLine.Option;

/** Command line mixin for parsing an AAPT xml tree dump of the host app. */
public final class HostAppInfoMixin {
  private static final Pattern MIN_SDK_VERSION_PATTERN =
      Pattern.compile(
          "http:\\/\\/schemas.android.com\\/apk\\/res\\/android:minSdkVersion\\(.*\\)=(\\d*)");

  @Option(
      names = "--manifest-xml-tree",
      description = "Path to the manifest xml tree file, as generated by AAPT2 dump command.",
      required = true)
  Path manifestXmlTreePath;

  public int getMinSdkVersion() {
    Optional<Integer> maybeMinSdkVersion = parseMinSdkVersion();
    checkArgument(
        maybeMinSdkVersion.isPresent(), "Min SDK version missing from manifest xml tree file.");
    return maybeMinSdkVersion.get();
  }

  private Optional<Integer> parseMinSdkVersion() {
    try (BufferedReader reader = Files.newBufferedReader(manifestXmlTreePath)) {
      return reader
          .lines()
          .map(MIN_SDK_VERSION_PATTERN::matcher)
          .filter(Matcher::find)
          .map(matcher -> Integer.parseInt(matcher.group(1)))
          .findFirst();
    } catch (IOException e) {
      throw new IllegalArgumentException("Invalid manifest xml tree file.", e);
    }
  }

  private HostAppInfoMixin() {}
}
